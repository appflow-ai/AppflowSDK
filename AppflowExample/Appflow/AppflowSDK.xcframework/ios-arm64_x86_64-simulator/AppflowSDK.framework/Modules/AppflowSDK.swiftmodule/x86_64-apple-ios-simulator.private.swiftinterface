// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AppflowSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import AppflowSDK
import AudioToolbox
import SystemConfiguration.CaptiveNetwork
import CoreTelephony
import CrashReporter
import Foundation
import Founq_KeychainIDFA
import GRPCClient
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let SDKVersion: Swift.String
public let kScreenViewName: Swift.String
public let kPlacement: Swift.String
public let kAdSource: Swift.String
public let kFormat: Swift.String
public let kEngagementTimeMsec: Swift.String
public let kHomepage: Swift.String
public let kNotFatalCrash: Swift.String
public let kSetting: Swift.String
public let kLockscreen: Swift.String
public let kQuickClean: Swift.String
public let kBoost: Swift.String
public let kInstall: Swift.String
public let kFaceBook: Swift.String
public let kAdmob: Swift.String
public let kMobpup: Swift.String
public let kBanner: Swift.String
public let kInterstitial: Swift.String
public let maxCurrentNum: Swift.Int
public let kTimerDuration: Swift.Int
@_hasMissingDesignatedInitializers public class AppFlowIMPTopViewController {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func topViewContoller() -> UIKit.UIViewController?
  #endif
  public static func topViewController(root: UIKit.UIViewController) -> UIKit.UIViewController
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMProduct : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let product: StoreKit.SKProduct
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMOfferSignatureDetail : ObjectiveC.NSObject {
  @objc final public let keyIdentifier: Swift.String
  @objc final public let signature: Swift.String
  @objc final public let nonce: Swift.String
  @objc final public let timestamp: Swift.Int64
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMSubscriber : ObjectiveC.NSObject {
  @objc final public let productId: Swift.String
  @objc final public let expireAt: Swift.Int64
  @objc final public let isActive: Swift.Bool
  @objc public var imEntitlements: [AppflowSDK.IMEntitlement]
  @objc public var imSubscriptions: [AppflowSDK.IMSubscription]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMEntitlement : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let expireAt: Swift.Int64
  @objc final public let isActive: Swift.Bool
  @objc final public let productId: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class IMSubscription : ObjectiveC.NSObject {
  @objc final public let productId: Swift.String
  @objc final public let status: AppflowSDK.IMSubscriberStatus
  @objc final public let subStatus: AppflowSDK.IMSubscriberSubStatus
  @objc final public let expireAt: Swift.Int64
  @objc final public let cancelAt: Swift.Int64
  @objc final public let willRenewTo: Swift.String
  @objc public var originalTransactions: [AppflowSDK.IMSubscriptionOriginalTransaction]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMSubscriptionOriginalTransaction : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let originalTxid: Swift.String
  @objc final public let startAt: Swift.Int64
  @objc final public let expireAt: Swift.Int64
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum IMSubscriberStatus : Swift.Int32 {
  case IM_MISSING_PURCH_INFO = 0
  case IM_EXPIRED_IN_RETRY = -1
  case IM_EXPIRED_FROM_BILLING = -2
  case IM_FAIL_TO_ACCEPT_INCREASE = -3
  case IM_PROD_NOT_AVAILABLE = -4
  case IM_EXP_VOLUNTARILY = -5
  case IM_Upgraded = -6
  case IM_ISSUE_REFUND = -7
  case IM_OTHER_REFUND = -8
  case IM_EXPIRED_WITH_PAUSE = -9
  case IM_ACTIVE_BUT_PAUSE = 6
  case IM_ACTIVE_AUTO_REN_ON = 5
  case IM_ACTIVE_AUTO_REN_OFF = 4
  case IM_NON_REN_SUB = 3
  case IM_OFF_PLATFORM_SUB = 2
  case IM_EXPIRED_IN_GRACE = 1
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int32)
  #endif
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum IMSubscriberSubStatus : Swift.Int32 {
  case IM_STANDARD_SUB = 0
  case IM_FREE_TRIAL = 1
  case IM_INTRODUCTORY = 2
  case IM_SUB_OFFER = 3
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int32)
  #endif
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum IMPromotingInAppPurchaseStatus : Swift.Int32 {
  case IM_CONTINUE
  case IM_DEFER_PAYMENT
  case IM_CANCEL_PAYMENT
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int32)
  #endif
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public protocol IMPromotingObserverProtocol : ObjectiveC.NSObjectProtocol {
  @objc func imPromotingAddStorePayment(status: AppflowSDK.IMPromotingInAppPurchaseStatus, payment: StoreKit.SKPayment, product: StoreKit.SKProduct)
}
public typealias SuccessBlock = (Any) -> Swift.Void
public typealias FailedBlock = (Any) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMRequestManager : ObjectiveC.NSObject {
  public static let shared: AppflowSDK.IMRequestManager
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadCacheData(with successBlock: AppflowSDK.SuccessBlock?, failureBlock failedBlock: AppflowSDK.FailedBlock?)
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Appflow : ObjectiveC.NSObject {
  @objc public static let shared: AppflowSDK.Appflow
  final public let purchases: AppflowSDK.IMPurchase
  final public let analytics: AppflowSDK.IMAnalytics
  @objc public func configure()
  @objc public func setPurchasesLogs(enabled: Swift.Bool)
  @objc public func setAnalyticsLogs(enabled: Swift.Bool)
  @objc public func getPurchaseProductIds(_ completion: @escaping AppflowSDK.PruchaseGetProductIdsCompletionHander)
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func getSkuDetails(productIds: Swift.Set<Swift.String>, completion: AppflowSDK.ProductSkuDetailRequestCompletionHandler?)
  #endif
  @objc public func purchaseSKProduct(_ product: StoreKit.SKProduct, completion: @escaping AppflowSDK.ProductPurchaseCompletionHandler)
  @objc public func purchaseFetchReceiptSKProduct(_ product: StoreKit.SKProduct, completion: @escaping AppflowSDK.ProductPurchaseFetchReceiptCompletionHandler)
  @objc public func finishTransactions(_ transactions: [StoreKit.SKPaymentTransaction])
  @objc public func addMonitorTransationCompletionHandler(completion: @escaping AppflowSDK.MonitorTransationCompletionHandler)
  @objc public func canMakePayment() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func hasActiveSubscription(_ completion: @escaping (AppflowSDK.IMSubscriber, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func restorePurchases(_ completion: @escaping (AppflowSDK.IMSubscriber, (any Swift.Error)?) -> Swift.Void)
  #endif
  @objc public func uploadUserInfo()
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func uploadUserInfo(userId: Swift.String?, extraAttribute: [Swift.String : Any] = [:], completion: ((Swift.Bool, (any Swift.Error)?) -> Swift.Void)?)
  #endif
  @objc public func getAppUserId() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func uploadDeviceInfo(deviceToken: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func updateAttribution(_ attribution: [Swift.AnyHashable : Any], source: AppflowSDK.AttributionNetwork, networkUserId: Swift.String? = nil, completion: AppflowSDK.updateAttributionRequestCompletionHandler? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func updateCustomAttribution(channel: Swift.String, campaign: Swift.String?, adGroup: Swift.String?, creative: Swift.String?, clickID: Swift.String?, completion: AppflowSDK.updateAttributionRequestCompletionHandler? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func loadPaywallToPurachase(completion: @escaping (Swift.Bool, Swift.String?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func uploadBigDataWithType(eventName: Swift.String, params: [Swift.AnyHashable : Any]?)
  #endif
  @objc public func setInAppMesssageAutoShow(isAuto: Swift.Bool)
  @objc public func setFromBackgroudPointToDelayTime(delayTime: Foundation.TimeInterval)
  @objc public func sendUserNotificationCenterMessage(userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension AppflowSDK.Appflow {
  @objc dynamic public func setAutoUserNotificationBehaviorDataReporting()
  @objc dynamic public func sendNotificationUserInfoToBehaviorDataReporting(userInfo: [Swift.AnyHashable : Any])
}
extension AppflowSDK.Appflow {
  @objc dynamic public func setInAppPurchasePromotingStatus(_ status: AppflowSDK.IMPromotingInAppPurchaseStatus, addObserver: any AppflowSDK.IMPromotingObserverProtocol)
}
extension AppflowSDK.Appflow {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc dynamic public func createASignature(productId: Swift.String, offerId: Swift.String, userid: Swift.String, completion: @escaping (AppflowSDK.IMOfferSignatureDetail?, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 12.2, *)
  @objc dynamic public func purchaseSKProductWithDiscount(_ product: StoreKit.SKProduct, paymentDiscount: StoreKit.SKPaymentDiscount, applicationUsername: Swift.String?, completion: @escaping AppflowSDK.ProductPurchaseCompletionHandler)
  #endif
}
extension AppflowSDK.Appflow {
  #if compiler(>=5.3) && $NonescapableTypes
  @objc dynamic public func getCurrencyRate(currencyCode: Swift.String, completion: @escaping (Foundation.NSNumber?, (any Swift.Error)?) -> Swift.Void)
  #endif
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class AppflowWelcomePage : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var waitingTime: Swift.Double
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc public enum AttributionNetwork : Swift.UInt {
  case adjust
  case appsflyer
  case branch
  case appleSearchAds
  case facebook
  case custom
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.UInt)
  #endif
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public typealias ProductPurchaseCompletionHandler = (_ transaction: StoreKit.SKPaymentTransaction, _ subscriber: AppflowSDK.IMSubscriber, _ error: (any Swift.Error)?, _ canceled: Swift.Bool) -> Swift.Void
public typealias ProductPurchaseFetchReceiptCompletionHandler = (_ transaction: StoreKit.SKPaymentTransaction, _ transactions: [StoreKit.SKPaymentTransaction], _ receiptData: Foundation.NSData?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias MonitorTransationCompletionHandler = (_ transaction: StoreKit.SKPaymentTransaction, _ transactions: [StoreKit.SKPaymentTransaction], _ receiptData: Foundation.NSData?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias ProductRestoreCompletionHandler = (AppflowSDK.IMSubscriber, (any Swift.Error)?) -> Swift.Void
public typealias InitInfoRequestCompletionHandler = (_ initInfo: AppflowSDK.GetInitInfoResponse?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias updateAttributionRequestCompletionHandler = (_ getAttributionResponse: AppflowSDK.GetAttributionResponse?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias ProductSkuDetailRequestCompletionHandler = (_ skuDetailInfo: [Swift.String : StoreKit.SKProduct]?, _ error: (any Swift.Error)?) -> Swift.Void
public typealias PruchaseGetProductIdsCompletionHander = (_ productIdArray: [Swift.String]?, _ error: (any Swift.Error)?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IMPurchase : ObjectiveC.NSObject {
  @objc public static let shared: AppflowSDK.IMPurchase
  @objc public func configureInitSDKWithAppFlowPlist()
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func getSkuDetails(productIds: Swift.Set<Swift.String>, completion: AppflowSDK.ProductSkuDetailRequestCompletionHandler?)
  #endif
  public func canMakePayments() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func hasActiveSubscription(_ completion: @escaping (AppflowSDK.IMSubscriber, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func restorePurchases(_ completion: @escaping (AppflowSDK.IMSubscriber, (any Swift.Error)?) -> Swift.Void)
  #endif
  @objc public func enableLog(_ isEnable: Swift.Bool)
  @objc public func isSandbox() -> Swift.Bool
  @objc public func invalidateCache()
  #if compiler(>=5.3) && $NonescapableTypes
  public func loadPaywallToPurachase(completion: @escaping (Swift.Bool, Swift.String?) -> Swift.Void)
  #endif
  @objc public func getPurchaseProductIds(_ completion: @escaping AppflowSDK.PruchaseGetProductIdsCompletionHander)
  @objc public func getUserIsActive() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func uploadUserInfo(userId: Swift.String?, extraAttribute: [Swift.String : Any] = [:], completion: ((Swift.Bool, (any Swift.Error)?) -> Swift.Void)?)
  #endif
  @objc public func getAppUserId() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func uploadDeviceInfo(deviceToken: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func updateAttribution(_ attribution: [Swift.AnyHashable : Any], source: AppflowSDK.AttributionNetwork, networkUserId: Swift.String? = nil, completion: AppflowSDK.updateAttributionRequestCompletionHandler? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc public func updateCustomAttribution(channel: Swift.String, campaign: Swift.String?, adGroup: Swift.String?, creative: Swift.String?, clickID: Swift.String?, completion: AppflowSDK.updateAttributionRequestCompletionHandler? = nil)
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CrashReporter {
  #if compiler(>=5.3) && $NonescapableTypes
  final public func startCrashReporter(completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  #endif
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMDeviceInfoManager : ObjectiveC.NSObject {
  public static let shared: AppflowSDK.IMDeviceInfoManager
  public func getCurrentMSimestamp() -> Foundation.TimeInterval
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IMRequestCache {
  public static let shared: AppflowSDK.IMRequestCache
  #if compiler(>=5.3) && $NonescapableTypes
  public func allRequests(fromFmdbWihtClass cls: Swift.AnyClass, finishBlock: @escaping (_ requestArr: [Any]?) -> Swift.Void)
  #endif
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMAnalytics : ObjectiveC.NSObject {
  public enum EventType : Swift.Int {
    case firstOpen
    case appStart
    case screenView
    case adsClick
    case adsShow
    case adsRequest
    case inAppPurchase
    case userEngagement
    case nonFatalCrash
    case fatalCrash
    case viewPaywall
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ParamScreenType : Swift.Int {
    case paramScreenNono
    case paramScreenHome
    case paramScreenSet
    case eParamScreenLock
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ParamPlaceType : Swift.Int {
    case paramPlaceNono
    case paramPlaceClean
    case paramPlaceBoost
    case paramPlaceInstall
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ParamAdSouceType : Swift.Int {
    case paramAdSouceNono
    case paramAdSouceFacebook
    case paramAdSouceAdmob
    case paramAdSouceMobpup
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ParamFormatType : Swift.Int {
    case paramFormatNono
    case paramFormatBanner
    case paramFormatInterstitial
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func registerBigDataWitInfoPlist()
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadBigDataWithType(eventType: AppflowSDK.IMAnalytics.EventType, params: [Swift.AnyHashable : Any]?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadBigDataWithEvent(eventName: Swift.String?, params: [Swift.AnyHashable : Any]?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadBigDataWithType(eventType: AppflowSDK.IMAnalytics.EventType, params: [Swift.AnyHashable : Any]?, successBlock: AppflowSDK.SuccessBlock?, failureBlock failedBlock: AppflowSDK.FailedBlock?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadBigDataWithEvent(eventName: Swift.String?, params: [Swift.AnyHashable : Any]?, successBlock: AppflowSDK.SuccessBlock?, failureBlock failedBlock: AppflowSDK.FailedBlock?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadBigDataWithType(eventType: AppflowSDK.IMAnalytics.EventType, paramModel model: AppflowSDK.ParamModel?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func uploadBigDataWithType(eventType: AppflowSDK.IMAnalytics.EventType, paramModel model: AppflowSDK.ParamModel?, successBlock: AppflowSDK.SuccessBlock?, failureBlock failedBlock: AppflowSDK.FailedBlock?)
  #endif
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ParamModel : ObjectiveC.NSObject {
  public var screenType: AppflowSDK.IMAnalytics.ParamScreenType
  public var placeType: AppflowSDK.IMAnalytics.ParamPlaceType
  public var adsouceType: AppflowSDK.IMAnalytics.ParamAdSouceType
  public var formatType: AppflowSDK.IMAnalytics.ParamFormatType
  public var otherData: [Swift.AnyHashable : Any]
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class IMInAppMessagePage : UIKit.UIView {
  @objc deinit
}
extension AppflowSDK.IMSubscriberStatus : Swift.Equatable {}
extension AppflowSDK.IMSubscriberStatus : Swift.Hashable {}
extension AppflowSDK.IMSubscriberStatus : Swift.RawRepresentable {}
extension AppflowSDK.IMSubscriberSubStatus : Swift.Equatable {}
extension AppflowSDK.IMSubscriberSubStatus : Swift.Hashable {}
extension AppflowSDK.IMSubscriberSubStatus : Swift.RawRepresentable {}
extension AppflowSDK.IMPromotingInAppPurchaseStatus : Swift.Equatable {}
extension AppflowSDK.IMPromotingInAppPurchaseStatus : Swift.Hashable {}
extension AppflowSDK.IMPromotingInAppPurchaseStatus : Swift.RawRepresentable {}
extension AppflowSDK.AttributionNetwork : Swift.Equatable {}
extension AppflowSDK.AttributionNetwork : Swift.Hashable {}
extension AppflowSDK.AttributionNetwork : Swift.RawRepresentable {}
extension AppflowSDK.IMAnalytics.EventType : Swift.Equatable {}
extension AppflowSDK.IMAnalytics.EventType : Swift.Hashable {}
extension AppflowSDK.IMAnalytics.EventType : Swift.RawRepresentable {}
extension AppflowSDK.IMAnalytics.ParamScreenType : Swift.Equatable {}
extension AppflowSDK.IMAnalytics.ParamScreenType : Swift.Hashable {}
extension AppflowSDK.IMAnalytics.ParamScreenType : Swift.RawRepresentable {}
extension AppflowSDK.IMAnalytics.ParamPlaceType : Swift.Equatable {}
extension AppflowSDK.IMAnalytics.ParamPlaceType : Swift.Hashable {}
extension AppflowSDK.IMAnalytics.ParamPlaceType : Swift.RawRepresentable {}
extension AppflowSDK.IMAnalytics.ParamAdSouceType : Swift.Equatable {}
extension AppflowSDK.IMAnalytics.ParamAdSouceType : Swift.Hashable {}
extension AppflowSDK.IMAnalytics.ParamAdSouceType : Swift.RawRepresentable {}
extension AppflowSDK.IMAnalytics.ParamFormatType : Swift.Equatable {}
extension AppflowSDK.IMAnalytics.ParamFormatType : Swift.Hashable {}
extension AppflowSDK.IMAnalytics.ParamFormatType : Swift.RawRepresentable {}
